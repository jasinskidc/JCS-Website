**Make a checklist of best practices of website making.**
-Drop down menus (have it where specific sub-pages/sections of a page are on a drop down menu when hovering over tab)

-try avoid having tiny drop down menus, apparently they negatively effect psychology. prob unavoidable with the early stages of the website.

-nav in header

-center on landing page, but when other pages ill have it top left next to the nav tabs, and on other pages it will be a link to the landing page.

-video on homepage to further explain what jcs offers

-descriptive header(let them know where they are and what you offer in a short fashion)

-have a call to action under the short description ,something like "enroll now".

-compress images so that they load faster, even logos and backgrounds

-don't have social media links near the top "these are candy colored exit signs" if you have em put them in the footer

-contact info, links to key pages, email sign-up box, social media icons, and legal links all in the footer.

-perhaps have a quick admin/employee sign-in in the footer as well.

-have call to actions in as many places as makes since throughout the site.

-call the actions need to be descriptive, and incite the user to action. like "schedule a meeting with us"

-its worth it to have a video to increase interest in the services.

-Title tag, the brief descriptor in the title of a page, needs to give an idea of what we offer and under 55 characters, for SEO

-descriptive nav tabs that don't just say "prices" or "downloads"

-show evidence what you offer works through testimonials, text and video, through links to partnerships and any data you have on hand

-make you site easy to launch for a new user, easy to get to different place on the website and not so easy to want to leave. ie if you can find it on the website why would you need to go to social media.

==========================================================================================================================================

**make a list of proper html syntax/format/etc**
-css,links, at the top javascript, links, at the bottom

-div is useful, but semantic tags are even more so,: header, nav, main, footer, video, audio, embed,figure, figcaption, section, article, aside

-header holds the title and anything relevant to that

-nav often held with headers hold any form of site navigation

-the place where all your sites content is held

-footer is where various call to actions and small information that is useful on any page of the website.

-video audio figure and embed all hold media with their matching types

-embed is self closing

-figcaption is often placed within figure so that its description in directly connected to the figure.

-sections segment the webpage into their own little folder

-articles are sections that could be separated from the site and still make since on their own.

-aside denotes a section that is not the main focus for the user.

-strive to be legible in your code, and otherwise, so that even someone who doesn't know html can look and understand what you are trying to do.

-don't over use comments but just enough to explain hard to understand bits of code.

======================================================================================================================

**make a list of proper css syntax/format/etc**
-break your code down so that it is easy to tell what is being changed at a glance by someone who doesn't really know css

-use comments to describe what you are doing/trying to do.

-also leave comments on what is actually happening if it is broken

-if the project is large use separate style sheets for differing design style

-if you have elements that are universal to the website keep it together if possible

-try not to unnecessarily split style sheets

-try not to use inline css, embed css in html

-minify style sheets??

-look up what a css preprocessor is and whether or not Hostinger even supports them

-if the project is large, i don't think this one is, use frameworks, again find out what they are.

-again look up normalize.css for css reset. what the hell man

-use classes if you want to change a group of the same kind of elements

-use id if you want to change a specific thing

**avoid redundancies by:**

    -not repeating what you don't need to

    -use css shorthand ie keep specific things on the same line (use comments to explain what defines what)

    -use multiple classes within elements if you want your elements to do a specific thing while still following another class design

    -combine elements for any style that can be shared between them such as font and color. (written like "h1, h3, p{}")

    -avoid unnecessary selectors. if you can use
    ".classname li{}" to change a list with in a class don't make "li{}" or "#myList{}" or some variation.

-**properly add fonts**

    -download the .ttf file of the font you want

    -upload the font you want to the webfont generator by font squirrel and get the .woff, .woff2, and .eot, as well as the original .ttf file

    -upload the font kit your web server.

    -update the css file with
    "@font-face{
        font-family: "fontName";
        src: url("www.website.com/path/to/file.eot")
        src: url("www.website.com/path/to/file.woff") format("woff"),
        url("www.website.com/path/to/file.otf") format("opentype"),
        url("www.website.com/path/to/file.svg#filename") format("svg")
    }"

    -preload fonts helps speed up site performance
    "<link rel="preload" as="font" href="/assets/fonts/font.woff" type="font/woff" crossorigin="crossorigin">"
    (cross origin is the html making a request{?} stating something, crossorigin can be anonymous or declare cookies/http/ some other thing LOOK MORE INTO IT)

    -self hosting fonts, ie what the previous couple of bits were showing, is better for speed

    -use font properties instead of some form of font variation

    -always have a fallback font that fits within the font family

-**make the css accessible**

    -color variation to links

    -make any popups dismissible by hitting 'esc' or pressing x

    -make sure all essential info is on the site and not a popup, i hate popups so noted

    -hover elements should also be trigger-able by the 'tab' key

    -don't remove outlines

    -seek accessability for those with a harder time navigating websites ie increase contrast and text
    size when hovering/focusing

    -use the focus and hover elements to enhance readability

-**decide a naming convention and stick to it religiously ie "nameThis" or "mainBG"**

    -xx

============================================================================================================================

**make a list of seo opt. meta information and other things i can do to help search engines.**
-x
**make a list of things the footer needs/should/could have**
-x
**Finish a outlining landing page layout and begin fleshing that out a bit.**
-brief description article

-noticeboard article

-collection of articles related to student/graduate testimonies (Still need to collect those--about 3)

**make the nav tab gem buttons**

**switch the background from a video to 3 images moving in, think this is the word, parallax. if i cant have it spinning i will have it in fo-3D!**
-sky (Stationary fille the screen)

-cross (only some movement if possible)

-diamond (maybe find a way to make it spin if i can otherwise just and image move slightly more than the cross)

**get the header and footer background dark-purple velvet/felt texture set up**

**Make golden metallic signage for the header and footer**
